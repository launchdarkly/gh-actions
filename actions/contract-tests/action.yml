name: "Contract Tests"
description: 'Runs contract tests against an SDK component.'
inputs:
  repo:
    required: false
    description: "Name of the test harness repo"
    default: 'sdk-test-harness'
  version:
    required: false
    description: "Version of the test harness"
    default: 'v2'
  branch:
    required: false
    description: "Branch of the test harness"
    default: 'v2'
  test_service_port:
    required: true
    description: "Port of the component under test."
    default: '8123'
  test_harness_port:
    required: false
    description: "Port of the test harness."
    default: '8111'
  enable_persistence_tests:
    required: false
    description: "Whether or not to enable support for persistence tests"
    default: true
  debug_logging:
    description: "Whether the test harness should print debug logs for failed tests."
    required: false
    default: 'false'
  extra_params:
    description: "Any other params to be passed to the test harness."
    required: false
  token:
    description: "Github token; if provided will avoid ratelimiting."
    required: false
    default: ''



runs:
  using: composite
  steps:
    - name: 'Run Contract Tests'
      shell: bash
      run: |
        curl ${{ inputs.token != '' && format('-H "Authorization: Token {0}"', inputs.token) || '' }} --retry 5 --retry-delay 2 --retry-max-time 60 --retry-connrefused -s https://raw.githubusercontent.com/launchdarkly/${{ inputs.repo }}/${{ inputs.branch }}/downloader/run.sh | bash
      env:
        # The token is directly used in the first curl command above to obtain the downloader script, to avoid rate limiting.
        # The token is then passed to the downloader script itself, so it can perform more API requests and hopefully avoid rate limiting again.
        GITHUB_TOKEN: ${{ inputs.token }}
        VERSION: ${{ inputs.version }}
        PARAMS: -url http://localhost:${{ inputs.test_service_port }} -port ${{ inputs.test_harness_port }} ${{ inputs.extra_params }} ${{ inputs.enable_persistence_tests == 'true' && '-enable-persistence-tests' || '' }} ${{ inputs.debug_logging == 'true' && '-debug' || '' }} -stop-service-at-end
